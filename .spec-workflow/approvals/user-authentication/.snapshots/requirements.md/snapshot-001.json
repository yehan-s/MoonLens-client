{
  "id": "snapshot_1758734233500_gp7tsqpr5",
  "approvalId": "approval_1758734233495_e0qp8ebv4",
  "approvalTitle": "用户认证系统需求文档",
  "version": 1,
  "timestamp": "2025-09-24T17:17:13.500Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements: User Authentication System\n\n## Overview\nMoonLens用户认证系统提供安全的用户身份验证、授权和会话管理功能，确保只有授权用户能够访问系统资源。\n\n## User Stories\n\n### 1. 用户注册\n**作为** 新用户\n**我想要** 通过邮箱注册账号\n**以便于** 使用MoonLens的代码审查服务\n\n**验收标准**：\n- 用户能够通过邮箱和密码注册\n- 邮箱格式验证\n- 密码强度验证（至少8位，包含大小写字母和数字）\n- 邮箱唯一性检查\n- 注册成功后自动登录\n\n### 2. 用户登录\n**作为** 注册用户\n**我想要** 使用邮箱密码登录系统\n**以便于** 访问我的项目和审查记录\n\n**验收标准**：\n- 用户能够使用邮箱和密码登录\n- 登录失败显示明确错误信息\n- 连续5次失败后锁定账户15分钟\n- 登录成功后跳转到仪表板\n\n### 3. GitLab OAuth登录\n**作为** GitLab用户\n**我想要** 使用GitLab账号直接登录\n**以便于** 快速访问系统并自动关联GitLab项目\n\n**验收标准**：\n- 支持GitLab OAuth 2.0认证\n- 首次登录自动创建用户账号\n- 自动获取GitLab用户信息\n- 保存GitLab访问令牌\n\n### 4. 会话管理\n**作为** 已登录用户\n**我想要** 系统能够记住我的登录状态\n**以便于** 不需要频繁重新登录\n\n**验收标准**：\n- JWT Token有效期7天\n- 支持Token自动刷新\n- 退出登录时清除Token\n- 多设备登录管理\n\n### 5. 密码重置\n**作为** 忘记密码的用户\n**我想要** 通过邮箱重置密码\n**以便于** 重新获得账号访问权限\n\n**验收标准**：\n- 发送密码重置邮件\n- 重置链接24小时有效\n- 重置成功后旧密码失效\n- 重置后需要重新登录\n\n### 6. 用户资料管理\n**作为** 登录用户\n**我想要** 查看和修改个人资料\n**以便于** 保持信息准确性\n\n**验收标准**：\n- 查看用户基本信息\n- 修改用户名、头像\n- 修改密码需验证旧密码\n- 修改邮箱需要验证\n\n## Functional Requirements\n\n### FR1: 认证模块\n- **FR1.1**: 实现JWT Token认证机制\n- **FR1.2**: 支持邮箱密码注册登录\n- **FR1.3**: 支持GitLab OAuth 2.0认证\n- **FR1.4**: 实现Token刷新机制\n- **FR1.5**: 实现登录失败锁定机制\n\n### FR2: 授权模块\n- **FR2.1**: 实现基于角色的访问控制(RBAC)\n- **FR2.2**: 定义用户角色（管理员、普通用户、访客）\n- **FR2.3**: 实现路由级别的权限控制\n- **FR2.4**: 实现API级别的权限验证\n\n### FR3: 用户管理\n- **FR3.1**: 用户CRUD操作\n- **FR3.2**: 用户资料更新\n- **FR3.3**: 密码重置流程\n- **FR3.4**: 邮箱验证流程\n- **FR3.5**: 用户状态管理（激活、锁定、注销）\n\n### FR4: 会话管理\n- **FR4.1**: Token存储（localStorage/sessionStorage）\n- **FR4.2**: Token自动刷新\n- **FR4.3**: 多设备登录检测\n- **FR4.4**: 会话超时处理\n\n## Non-Functional Requirements\n\n### NFR1: 安全性\n- **NFR1.1**: 密码使用bcrypt加密（salt rounds: 10）\n- **NFR1.2**: HTTPS传输加密\n- **NFR1.3**: SQL注入防护\n- **NFR1.4**: XSS攻击防护\n- **NFR1.5**: CSRF令牌验证\n\n### NFR2: 性能\n- **NFR2.1**: 登录响应时间 < 500ms\n- **NFR2.2**: Token验证时间 < 50ms\n- **NFR2.3**: 支持10000并发用户\n- **NFR2.4**: 数据库查询优化（索引）\n\n### NFR3: 可用性\n- **NFR3.1**: 清晰的错误提示\n- **NFR3.2**: 响应式登录界面\n- **NFR3.3**: 记住登录选项\n- **NFR3.4**: 单点登录(SSO)支持\n\n### NFR4: 可维护性\n- **NFR4.1**: 模块化代码结构\n- **NFR4.2**: 完整的API文档\n- **NFR4.3**: 单元测试覆盖率 > 80%\n- **NFR4.4**: 日志记录和监控\n\n## Constraints\n\n### 技术约束\n- 前端：Vue 3 + TypeScript + Pinia\n- 后端：NestJS + Prisma + MySQL\n- 认证：Passport.js + JWT\n- 通信：RESTful API + WebSocket\n\n### 业务约束\n- 必须符合GDPR数据保护规范\n- 密码策略符合行业标准\n- 支持中英文界面\n- 兼容主流浏览器\n\n### 时间约束\n- MVP版本2周内完成\n- 包含基础注册登录功能\n- GitLab OAuth可在第二阶段实现\n\n## Acceptance Criteria\n\n### AC1: 用户注册流程\n1. 用户填写注册表单（邮箱、密码、用户名）\n2. 系统验证输入合法性\n3. 系统检查邮箱唯一性\n4. 系统创建用户账号\n5. 系统生成JWT Token\n6. 用户自动登录并跳转到仪表板\n\n### AC2: 用户登录流程\n1. 用户输入邮箱和密码\n2. 系统验证凭据\n3. 登录成功生成JWT Token\n4. 存储Token到本地\n5. 跳转到用户仪表板\n\n### AC3: Token刷新流程\n1. 检测Token即将过期（< 1小时）\n2. 自动调用刷新接口\n3. 获取新Token\n4. 更新本地存储\n5. 继续用户操作\n\n### AC4: 权限验证流程\n1. 用户访问受保护路由\n2. 系统检查Token有效性\n3. 系统验证用户权限\n4. 允许或拒绝访问\n5. 无权限时跳转登录页\n\n## Dependencies\n\n### 外部依赖\n- GitLab OAuth API\n- 邮件服务（密码重置）\n- Redis（会话存储）\n\n### 内部依赖\n- 数据库服务\n- 缓存服务\n- 日志服务\n\n## Risks\n\n### 风险1: 安全漏洞\n- **影响**: 高\n- **概率**: 中\n- **缓解**: 安全审计、渗透测试、及时更新依赖\n\n### 风险2: GitLab API变更\n- **影响**: 中\n- **概率**: 低\n- **缓解**: 版本锁定、API适配层、降级方案\n\n### 风险3: 性能瓶颈\n- **影响**: 中\n- **概率**: 中\n- **缓解**: 缓存优化、数据库索引、负载均衡\n\n## Success Metrics\n\n1. **注册转化率** > 60%\n2. **登录成功率** > 95%\n3. **平均登录时间** < 2秒\n4. **Token刷新成功率** > 99%\n5. **用户满意度** > 4.0/5.0",
  "fileStats": {
    "size": 5564,
    "lines": 215,
    "lastModified": "2025-09-24T17:17:06.014Z"
  },
  "comments": []
}